{"version":3,"sources":["reducers/index.js","reducers/marketInfoReducer.js","reducers/searchTermReducer.js","apis/CoinGecko.js","components/Coin.js","components/CoinList.js","actions/index.js","components/SearchBar.js","components/App.js","components/CoinAnalysis.js","images/coingecko.png","components/Header.js","index.js"],"names":["combineReducers","coins","state","action","type","payload","searchTerm","axios","create","baseURL","Coin","props","numberWithCommas","bind","displayPriceChange","marketcap","toString","replace","priceChange","parsedChange","parseFloat","className","style","color","toFixed","linkURLWithParams","this","id","counter","maxWidth","src","image","to","name","currentPrice","priceChangePercentage","React","Component","CoinList","renderCoins","coinListOrdered","filterCoinList","length","Spinner","coinCounter","map","coin","symbol","price_change_percentage_24h","current_price","market_cap","toLowerCase","includes","displayAmount","sortBy","updateNumberOfCoinsToDisplay","setListFilterState","fetchMarketInfo","timerID","setInterval","clearInterval","showMoreSpinner","document","getElementById","classList","remove","add","setTimeout","setState","coinList","sort","a","b","filterType","onClick","e","target","Button","size","connect","dispatch","CoinGecko","get","params","vs_currency","per_page","response","console","log","data","SearchBar","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","ame","onChange","updateMarketSearchTerm","value","App","Container","CoinAnalysis","toggle","modalReverse","modal","amountPurchased","startDate","Date","amountOverTime","displayCoinInfo","fetchCoin","calculateAmountOverTime","URLSearchParams","location","search","preventDefault","getDay","from","getTime","currentValue","prices","initialValue","x","small","verticalAlign","Toast","ToastHeader","ToastBody","market_cap_rank","market_data","usd","ath","atl","price_change_24h","dateToday","toDateString","onSubmit","min","placeholder","step","selected","dateFormat","date","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Header","toggleInverse","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","class","CoinGeckoLogo","alt","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","basename","process","path","exact","component","querySelector"],"mappings":"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","file":"static/js/main.cc75fd18.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport marketInfo from './marketInfoReducer'\nimport searchTerm from './searchTermReducer'\n\nexport default combineReducers({\n    coins: marketInfo,\n    searchTerm: searchTerm\n})","export default (state=[], action) => {\n    switch(action.type) {\n        case 'FETCH_MARKET_INFO':\n            return action.payload\n        default:\n            return state\n    }\n}","export default (state='', action) => {\n    switch(action.type) {\n        case 'UPDATE_SEARCH_TERM':\n            return action.payload\n        default:\n            return state\n    }\n}","import axios from 'axios'\n\nexport default axios.create({\n    baseURL: 'https://api.coingecko.com/api/v3/'\n})","import { parse } from 'query-string';\nimport React from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col } from 'reactstrap';\nimport '../css/App.css'\n\nclass Coin extends React.Component {\n        constructor(props) {\n            super(props)\n            this.numberWithCommas = this.numberWithCommas.bind(this)\n            this.displayPriceChange = this.displayPriceChange.bind(this)\n        }\n\n        numberWithCommas(marketcap) {\n            const num = marketcap.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            return num\n        }\n\n        displayPriceChange(priceChange) {\n            const parsedChange = parseFloat(priceChange)\n\n            if(parsedChange > 0) {\n                return <p className='pt-2' style={{color: 'green'}}>{parsedChange.toFixed(2)}%</p>\n                \n            }\n            else {\n                return <p className='pt-2' style={{color: 'red'}}>{parsedChange.toFixed(2)}%</p>\n            }\n\n\n        }\n\n    render() {\n\n        const linkURLWithParams = `coininfo/?coin=${this.props.id}`\n\n        return (\n                    <div className='coin-row-entry'>\n                        <div className='row'>\n                            <div className='col-1'>\n                                <p className='pt-2'>{this.props.counter}</p>\n                            </div>\n                            <div className='col'>\n                                <img className='img-fluid' style={{maxWidth: \"40px\"}} src={this.props.image} />\n                            </div>\n                            <div className='col'>\n                                <Link to={linkURLWithParams}>\n                                    <p className='pt-2'>{this.props.name}</p>\n                                </Link>\n                            </div>\n                            <div className='col'>\n                                <p className='pt-2'>${this.numberWithCommas((parseFloat(this.props.currentPrice).toFixed(2)))}</p>\n                            </div>\n                            <div className='col d-none d-sm-block'>\n                                {this.displayPriceChange(this.props.priceChangePercentage)}\n                            </div>\n                            <div className='col d-none d-lg-block' >\n                                ${this.numberWithCommas(parseFloat(this.props.marketcap).toFixed(2))}\n                            </div>\n                        </div>\n                    </div>\n        )\n    }\n}\n\n\nexport default Coin","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchMarketInfo } from '../actions/'\nimport Coin from './Coin'\nimport { Col, Row, Spinner, Button} from 'reactstrap'\n\n\nclass CoinList extends Component {\n\n     constructor(props) {\n        super(props)\n            this.state = {\n            displayAmount: 20,\n            sortBy: this.props.sortBy\n        }\n\n        this.updateNumberOfCoinsToDisplay = this.updateNumberOfCoinsToDisplay.bind(this)\n        this.renderCoins = this.renderCoins.bind(this)\n        this.setListFilterState = this.setListFilterState.bind(this)\n        this.filterCoinList = this.filterCoinList.bind(this)\n    }\n\n    componentDidMount() {\n\n\n        if(this.props.coins.length > 0 != true) {\n            this.props.fetchMarketInfo(this.state.displayAmount)\n        }\n\n\n        this.timerID = setInterval(\n            () => this.props.fetchMarketInfo(this.state.displayAmount),\n            20000\n        )\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID)\n    }\n\n\n    updateNumberOfCoinsToDisplay() {\n        let showMoreSpinner = document.getElementById(\"show-more-spinner\")\n        showMoreSpinner.classList.remove('d-none')\n        showMoreSpinner.classList.add('d-block')\n        this.props.fetchMarketInfo(20 + this.state.displayAmount)\n        setTimeout(() => {\n            showMoreSpinner.classList.remove('d-block')\n            showMoreSpinner.classList.add('d-none')\n        }, 900)\n        this.setState({displayAmount: this.state.displayAmount + 20})\n    }\n\n    filterCoinList(coins) {\n        \n        let coinList = coins\n\n        if(this.state.sortBy === 'priceAscending') {\n            coinList = coinList.sort((a,b) => {\n                return parseFloat(a.current_price) - parseFloat(b.current_price)\n            })\n        }\n        else if(this.state.sortBy === 'priceDescending') {\n            coinList = coinList.sort((a,b) => {\n                return parseFloat(b.current_price) - parseFloat(a.current_price)\n            })\n        }\n        else if(this.state.sortBy === 'priceChangeAscending') {\n            coinList = coinList.sort((a,b) => {\n                return parseFloat(a.price_change_percentage_24h) - parseFloat(b.price_change_percentage_24h)\n            })\n        }\n        else if(this.state.sortBy === 'priceChangeDescending') {\n            coinList = coinList.sort((a,b) => {\n                return parseFloat(b.price_change_percentage_24h) - parseFloat(a.price_change_percentage_24h)\n            })\n        }\n        else if(this.state.sortBy === 'marketcapAscending') {\n            coinList = coinList.sort((a,b) => {\n                return parseFloat(a.market_cap) - parseFloat(b.market_cap)\n            })\n        }\n\n        else if(this.state.sortBy === 'marketcapDescending') {\n            coinList = coinList.sort((a,b) => {\n                return parseFloat(b.market_cap) - parseFloat(a.market_cap)\n            })\n        }\n        \n\n        return coinList\n    }\n\n    renderCoins = () => {\n\n        let coinListOrdered = this.filterCoinList(this.props.coins)\n\n        \n        if(this.props.coins.length === 0) {\n            return (\n                <div>\n                    <Spinner color=\"primary\" />\n                </div>\n            )\n        }\n        else {\n\n            let coinCounter = 0\n\n            if(this.props.searchTerm === '') {\n                \n    \n            return coinListOrdered.map(coin => {\n\n                return (\n                    <Coin key={coin.id} counter={++coinCounter} name={coin.name} id={coin.id} symbol={coin.symbol} priceChangePercentage={coin.price_change_percentage_24h} image={coin.image} currentPrice={coin.current_price} marketcap={coin.market_cap}/>\n                )\n            })\n        }\n        else {\n            return coinListOrdered.map(coin => {\n                let coin_name = coin.name.toLowerCase()\n                if(coin_name.includes(this.props.searchTerm)) {\n                    return (\n                        <Coin key={coin.id} name={coin.name} priceChangePercentage={coin.price_change_percentage_24h} symbol={coin.symbol} image={coin.image} id={coin.id} currentPrice={coin.current_price} marketcap={coin.market_cap}/>\n                    )\n                }\n            })\n        }\n    }\n }\n\n\nsetListFilterState(filterType) {\n    if(filterType === 'price') {\n            if(this.state.sortBy === 'priceDescending') {\n                this.setState({sortBy: 'priceAscending'})\n            }\n            else if(this.state.sortBy === 'priceAscending') {\n                this.setState({sortBy: 'priceDescending'})\n            }\n            else {\n                this.setState({sortBy: 'priceAscending'})\n            }\n    }\n    else if(filterType === 'price-change') {\n            if(this.state.sortBy === 'priceChangeDescending') {\n                this.setState({sortBy: 'priceChangeAscending'})\n            }\n            else if(this.state.sortBy === 'priceChangeAscending') {\n                this.setState({sortBy: 'priceChangeDescending'})\n            }\n            else {\n                this.setState({sortBy: 'priceChangeAscending'})\n            }\n    }\n    else if(filterType === 'marketcap') {\n            if(this.state.sortBy === 'marketcapDescending') {\n                this.setState({sortBy: 'marketcapAscending'})\n            }\n            else if(this.state.sortBy === 'marketcapAscending') {\n                this.setState({sortBy: 'marketcapDescending'})\n            }\n            else {\n                this.setState({sortBy: 'marketcapAscending'})\n            }\n    }\n    \n}\n\n\n    render() {\n\n        return (\n            <div>\n                <div className='pt-3 row'>  \n                    <div className='col-1'>\n                        <p className='font-weight-bold'>#</p>\n                    </div>\n                    <div className='col'>\n                        <p className='font-weight-bold'>Logo</p>\n                    </div>\n                    <div className='col'>\n                        <a id='name' className='coinlist-col-title' onClick={(e) => this.setListFilterState(e.target.id)}>Name</a>\n                    </div>\n                    <div className='col'>\n                        <p id='price' className='coinlist-col-title' onClick={(e) => this.setListFilterState(e.target.id)}>Price</p>\n                    </div>\n                    <div className='d-none d-sm-block col'>\n                        <p id='price-change' className='coinlist-col-title' onClick={(e) => this.setListFilterState(e.target.id)}>Price Change</p>\n                    </div>\n                    <div className='d-none d-lg-block col'>\n                        <p id='marketcap' className='coinlist-col-title' onClick={(e) => this.setListFilterState(e.target.id)}>Market Cap</p>\n                    </div>                          \n            </div>\n                {this.renderCoins()}\n                <Spinner className='d-none pt-4' id='show-more-spinner' color=\"primary\" />\n                <Button className='mt-4' onClick={this.updateNumberOfCoinsToDisplay} color=\"primary\" size=\"lg\">Show More</Button>{' '}\n\n             </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        coins: state.coins,\n        searchTerm: state.searchTerm\n    }\n}\n\n\nexport default connect(\n    mapStateToProps,\n    {fetchMarketInfo})\n    (CoinList)\n","import { useDebugValue } from 'react'\nimport CoinGecko from '../apis/CoinGecko'\n\nexport const fetchMarketInfo = (displayAmount) => async dispatch => {\n    const response = await CoinGecko.get('/coins/markets', {\n        params: {\n            vs_currency: 'usd',\n            per_page: displayAmount\n        }\n    })\n\n    console.log(response)\n    dispatch({type: 'FETCH_MARKET_INFO', payload: response.data})\n}\n\nexport const updateMarketSearchTerm = (searchTerm) => dispatch => {\n    console.log(searchTerm)\n    dispatch({type: 'UPDATE_SEARCH_TERM', payload: searchTerm})\n    \n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { updateMarketSearchTerm } from '../actions/'\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from 'reactstrap';\n\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n\n    render() {\n        return (\n            <InputGroup size='md' className='mb-4'>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>Search for coin</InputGroupText>\n            </InputGroupAddon>\n            <Input ame=\"name\" onChange={e => this.props.updateMarketSearchTerm(e.target.value.toLowerCase())}/>\n          </InputGroup>\n        )\n    }\n}\n\n\n\n\nexport default connect(\n     null,\n    {updateMarketSearchTerm})\n    (SearchBar)\n","import React, { Component } from 'react'\nimport CoinList from './CoinList'\nimport SearchBar from './SearchBar'\nimport { Container, Row, Col } from 'reactstrap';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className='pt-5'>\n                            <SearchBar className='mt-3'/>\n                            <div className='p-3'>\n                                <CoinList sortBy='default'/>\n                            </div>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default App","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport CoinGecko from '../apis/CoinGecko'\nimport { Container, Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner,  InputGroup, InputGroupAddon, InputGroupText, Input, Toast, ToastBody, ToastHeader} from 'reactstrap' \n\nimport DatePicker from \"react-datepicker\"\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport '../css/App.css'\n\nclass CoinAnalysis extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            coin: '',\n            amountPurchased: '',\n            startDate: new Date(),\n            amountOverTime: '',\n            modal: false\n        }\n\n        this.displayCoinInfo = this.displayCoinInfo.bind(this)\n        this.fetchCoin = this.fetchCoin.bind(this)\n        this.calculateAmountOverTime = this.calculateAmountOverTime.bind(this)\n        this.numberWithCommas = this.numberWithCommas.bind(this)\n    }\n\n    componentDidMount() {\n        const url =  new URLSearchParams(this.props.location.search);\n        var id = url.get('coin')\n        //check if component state for coin doesn't exist\n        if(id !== null) {\n            //if it doesn't exist then we check to make sure we have a query string parameter for coin id\n            this.fetchCoin(id)   \n        }  \n    }\n      \n\n    async fetchCoin(id){\n\n            const response = await CoinGecko.get('/coins/' + id, {})\n            this.setState({coin:response.data})\n    }\n\n\n\n    async calculateAmountOverTime(e) {\n        \n        e.preventDefault() \n\n        if(this.state.startDate.getDay() === new Date().getDay()) {\n            this.toggle()\n        }\n\n        else if(!this.state.amountPurchased) {\n            console.log('please entry a valid amount')\n        }\n\n        else {\n\n            console.log('made it')\n        let response =  await CoinGecko.get(`/coins/${this.state.coin.id}/market_chart/range`, {\n                params: {\n                    vs_currency: 'usd',\n                    from: this.state.startDate.getTime()/1000,\n                    to: new Date().getTime()/1000\n                }\n            })\n\n            \n            let currentValue = response.data.prices[response.data.prices.length-1][1] \n            let initialValue = response.data.prices[0][1]\n            this.setState({amountOverTime: (currentValue/initialValue)*this.state.amountPurchased})\n        }\n\n    }\n\n        \n    toggle = () =>{\n\n        const modalReverse = !this.state.modal\n\n        this.setState({modal: modalReverse})\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n\n\n    displayCoinInfo() {\n\n        const url =  new URLSearchParams(this.props.location.search);\n        const id = url.get('coin')\n\n        if(this.state.coin.id === id) {\n                return (\n                    <div>\n                    <img src={this.state.coin.image.small}/>\n                    <h1 style={{verticalAlign: 'middle'}} className='d-inline ml-2'>{this.state.coin.name}</h1>\n                    <div className='row coin-stats'>\n                            <div className='col-12 col-md mb-4 mb-md-0'>\n                                    <Toast>\n                                        <ToastHeader>\n                                        <h5>Market Cap Ranking:</h5>\n                                    </ToastHeader>\n                                    <ToastBody>\n                                        #{this.state.coin.market_cap_rank}                                    \n                                    </ToastBody>\n                                    </Toast>\n                                    <Toast>\n                                        <ToastHeader>\n                                        <h5>Market Cap:</h5>\n                                    </ToastHeader>\n                                    <ToastBody>\n                                        ${this.numberWithCommas(this.state.coin.market_data.market_cap.usd)}                                    \n                                    </ToastBody>\n                                    </Toast>\n                                    <Toast>\n                                        <ToastHeader>\n                                        <h5>Current Price:</h5>\n                                    </ToastHeader>\n                                    <ToastBody>\n                                        ${this.state.coin.market_data.current_price.usd}                                  \n                                    </ToastBody>\n                                    </Toast>\n                            </div>\n                            <div className='col-12 col-md'>\n                            <Toast>\n                                <ToastHeader>\n                                    <h5>All Time High:</h5>\n                                </ToastHeader>\n                                <ToastBody>\n                                    ${this.state.coin.market_data.ath.usd}                           \n                                </ToastBody>\n                            </Toast>\n                            <Toast>\n                                <ToastHeader>\n                                    <h5>All Time Low:</h5>\n                                </ToastHeader>\n                                <ToastBody>\n                                    ${this.state.coin.market_data.atl.usd.toFixed(2)}                                  \n                                </ToastBody>\n                            </Toast>\n\n                            <Toast>\n                                <ToastHeader>\n                                    <h5>24 Hour Change:</h5>\n                                </ToastHeader>\n                            <ToastBody>\n                                    {\n                                    (this.state.coin.market_data.price_change_24h > 0)\n                                    ? <span style={{color: 'green'}}>${this.state.coin.market_data.price_change_24h.toFixed(2)}</span>\n                                    : <span style={{color: 'red'}}>${this.state.coin.market_data.price_change_24h.toFixed(2)}</span>\n                                    }                                    </ToastBody>\n                                    </Toast>\n                        \n                            </div>\n                        \n                    </div>\n                    </div>\n                    \n                )\n        } \n            else {\n                return (\n                    <div>\n                        <Spinner />\n                    </div>\n                )\n            }\n     }\n\n    render() {\n        let dateToday = new Date().toDateString()\n\n        return (\n            <div>\n            <div id=\"coin-details-section\">\n              <Container id=\"coin-analysis-container\">{this.displayCoinInfo()}</Container>\n            </div>\n            <div id='value-over-time-section'>\n              <Container>\n                <h3 className=\"text-center mb-3\">\n                  How much would your {this.state.coin.name} be worth if you initially\n                  purchased it on a certain date?\n                </h3>\n                <p className=\"mb-3\">\n                  Enter an amount of {this.state.coin.name} and the date you purchased it\n                  on to see how much it'd be worth today.\n                </p>\n                <form onSubmit={this.calculateAmountOverTime}>\n                  <p>Amount of $ invested in {this.state.coin.name}:</p>\n                  <InputGroup id=\"initial-amount-field\">\n                    <InputGroupAddon addonType=\"prepend\">$</InputGroupAddon>\n                    <Input\n                      min=\"1\"\n                      value={parseFloat(this.state.amountPurchased)}\n                      onChange={(e) =>\n                        this.setState({ amountPurchased: parseFloat(e.target.value) })\n                      }\n                      placeholder=\"Amount\"\n                      type=\"number\"\n                      step=\"1\"\n                    />\n                  </InputGroup>\n                  <p className=\"mt-3\">Date Purchased:</p>\n                  <DatePicker\n                    id=\"start\"\n                    selected={this.state.startDate}\n                    dateFormat=\"MM/dd/yyyy\"\n                    onChange={(date) => this.setState({ startDate: date })}\n                  />\n                  <Button className=\"d-block mt-3\" type=\"submit\" value=\"Submit\">\n                    Submit\n                  </Button>\n                </form>\n          \n                <div>\n                  {!this.state.amountOverTime ? (\n                    <div></div>\n                  ) : (\n                    <div>\n                      Your {this.state.coin.name} would be worth $\n                      {this.numberWithCommas(this.state.amountOverTime.toFixed(2))} for\n                      today's date of {dateToday}\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>\n                      Enter a date from the past.\n                    </ModalHeader>\n                    <ModalBody>\n                      You picked today's current date of {new Date().toDateString()} Pick\n                      a date from the past.\n                    </ModalBody>\n                    <ModalFooter>\n                      <Button color=\"primary\" onClick={this.toggle}>\n                        Close\n                      </Button>\n                    </ModalFooter>\n                  </Modal>\n                </div>\n              </Container>\n            </div>\n          </div>\n        )\n    }\n}\n\n\n\nexport default CoinAnalysis\n","export default __webpack_public_path__ + \"static/media/coingecko.f8569e11.png\";","import React from 'react'\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    NavbarText\n  } from 'reactstrap';\n  import {Link} from 'react-router-dom'\n  import '../css/App.css'\n  import CoinGeckoLogo from '../images/coingecko.png'\n\n\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isOpen: false\n        }\n\n        this.toggle = this.toggle.bind(this)\n    }\n\n    toggle() {\n        let toggleInverse = !this.state.isOpen\n        this.setState({isOpen: toggleInverse})\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"md\">\n                    <div className='container'>\n                        <i className=\"fa fa-bitcoin fa-2x mr-2\" style={{color: 'white'}}></i>\n                        <NavbarBrand href=\"/\">Crypto Market Watch</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"mr-auto\" navbar>\n                            <NavItem>\n                                <Link to='/'>\n                                    <p className='nav-link'>Market Overview</p>\n                                </Link>\n                            </NavItem>\n                            </Nav>\n                        </Collapse>\n                        <div class='d-none d-md-block'>\n                            <p class='d-inline-block' id='powered-text'>Powered By</p>\n                            <a target='_blank' href='https://coingecko.com'>\n                                <img src={CoinGeckoLogo} className='img-fluid coingecko-logo' alt='Coin Gecko Logo'/>\n                            </a>\n                        </div>\n                </div>\n                </Navbar>\n          </div>\n        )\n    }\n}\n\nexport default Header","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from  'redux-thunk'\nimport {Router, Route} from 'react-router-dom'\n\nimport reducers from './reducers'\nimport App from './components/App'\nimport CoinAnalysis from './components/CoinAnalysis'\nimport Header from './components/Header'\n\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router basename={process.env.PUBLIC_URL}>\n        <Header />\n            <Route path='/crypto-market-watch' exact component={App} />\n            <Route path='/crypto-market-watch/coininfo/' exact component={CoinAnalysis} />\n        </Router>\n    </Provider>,\n    document.querySelector('#root')\n)"],"sourceRoot":""}